# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Sample Data: You should replace this with your dataset
data = {
    'plot_summary': ['A young wizard learns magic at a school of witchcraft and wizardry.',
                     'In a galaxy far, far away, rebels fight against an evil empire.',
                     'A detective solves crimes and navigates the complex underworld of a city.'],
    'genre': ['Fantasy', 'Sci-Fi', 'Mystery']
}

df = pd.DataFrame(data)

# Split the dataset into training and testing sets
train_data, test_data, train_labels, test_labels = train_test_split(
    df['plot_summary'],
    df['genre'],
    test_size=0.2,
    random_state=42
)

# Explore the data
print(df.head())

# TF-IDF Vectorization
tfidf_vectorizer = TfidfVectorizer(max_features=5000)  # You can adjust max_features as needed
train_vectors = tfidf_vectorizer.fit_transform(train_data)
test_vectors = tfidf_vectorizer.transform(test_data)

# Train a classifier (Choose one of the following)
# 1. Naive Bayes
classifier_nb = MultinomialNB()
classifier_nb.fit(train_vectors, train_labels)
predictions_nb = classifier_nb.predict(test_vectors)

# 2. Logistic Regression
classifier_lr = LogisticRegression(max_iter=1000)
classifier_lr.fit(train_vectors, train_labels)
predictions_lr = classifier_lr.predict(test_vectors)

# 3. Support Vector Machines (SVM)
classifier_svm = SVC()
classifier_svm.fit(train_vectors, train_labels)
predictions_svm = classifier_svm.predict(test_vectors)

# Evaluate the models
def evaluate_model(predictions, actual_labels, model_name):
    accuracy = accuracy_score(actual_labels, predictions)
    report = classification_report(actual_labels, predictions)
    print(f"Accuracy of {model_name}: {accuracy}")
    print(f"Classification Report of {model_name}:\n{report}\n")

# Evaluate Naive Bayes model
evaluate_model(predictions_nb, test_labels, 'Naive Bayes')

# Evaluate Logistic Regression model
evaluate_model(predictions_lr, test_labels, 'Logistic Regression')

# Evaluate Support Vector Machines (SVM) model
evaluate_model(predictions_svm, test_labels, 'SVM')
